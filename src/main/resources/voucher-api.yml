# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
openapi: '3.0.1'
info:
  title: Voucher API
  version: 1.0.1
  description: DOCOMO Digital Voucher API
  contact:
    email: product.facilitator@docomodigital.com

servers:
  - url: https://stg-ddp-api.docomodigital.com/v1
    description: Test server
  - url: https://ddp-api.docomodigital.com/v1
    description: Live server
tags:
  - name: Voucher API (external)
    description: Provides API to consume voucher codes
  - name: Voucher types configuration
    description: Provides API to configure voucher mangement system (internal only)
  - name: Voucher Bulk API
    description: Provides API to manage vouchers (internal only)

paths:
  /external/voucher-type/{typeId}/reserve:
    post:
      tags:
        - Voucher API (external)
      summary: reserve
      operationId: reserveVoucher
      description: reserve the voucher
      security:
        - ApiKeyAuth: []
          SignRequest: []
      parameters:
        - $ref: '#/components/parameters/TypeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveRequest'
      responses:
        '200':
          $ref: '#/components/responses/VoucherResponse'
        '400':
          $ref: '#/components/responses/ErrorDetails'
        '401':
          $ref: '#/components/responses/ErrorDetails'
        '403':
          $ref: '#/components/responses/ErrorDetails'

  /external/voucher-type/{typeId}/voucher/{code}:
    parameters:
      - $ref: '#/components/parameters/TypeId'
      - $ref: '#/components/parameters/VoucherCode'
    patch:
      tags:
        - Voucher API (external)
      summary: voucher update
      operationId: updateVoucher
      description: update the voucher data
      security:
        - ApiKeyAuth: []
          SignRequest: []
      requestBody:
        $ref: '#/components/requestBodies/VoucherRequest'
      responses:
        '200':
          $ref: '#/components/responses/VoucherResponse'
        '401':
          $ref: '#/components/responses/ErrorDetails'
        '403':
          $ref: '#/components/responses/ErrorDetails'
        '400':
          $ref: '#/components/responses/ErrorDetails'
    get:
      tags:
        - Voucher API (external)
      summary: get voucher
      operationId: getVoucher
      description: get the voucher data
      security:
        - ApiKeyAuth: []
          SignRequest: []
      responses:
        '200':
          $ref: '#/components/responses/VoucherResponse'
        '401':
          $ref: '#/components/responses/ErrorDetails'
        '403':
          $ref: '#/components/responses/ErrorDetails'
        '400':
          $ref: '#/components/responses/ErrorDetails'

  /voucher-type/available:
    get:
      tags:
        - Voucher types configuration
      summary: search the voucher type available
      operationId: getAvailableVoucherTypes
      description: list of voucher types for specific merchant
      parameters:
        - in: query
          name: merchant
          description: merchant identifier
          required: true
          example: tinder
          schema:
            type: string
        - in: query
          name: paymentProvider
          description: payment provider that can be consume the vouchers
          required: true
          example: PAYTM
          schema:
            type: string
        - in: query
          name: country
          example: IN
          description: country when the voucher can be consumed the vouchers
          required: true
          schema:
            type: string
      responses:
        '200':
          description: resulting Voucher types list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableVoucherTypes'
        '400':
          $ref: '#/components/responses/ErrorDetails'

  /products/available:
    get:
      tags:
        - Voucher types configuration
      summary: search the products available
      operationId: getAvailableProducts
      description: list of products available
      parameters:
        - in: query
          name: products
          description: list of products to check availability
          required: false
          example: Tinder 1 Month
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: resulting products list available
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /voucher-type:
    get:
      tags:
        - Voucher types configuration
      summary: search the voucher type
      operationId: getVoucherTypes
      description: list of voucher types with optional filters
      parameters:
        - in: query
          name: merchant
          description: merchant identifier
          required: false
          schema:
            type: string
        - in: query
          name: country
          description: country where the vouchers are distributed
          required: false
          schema:
            type: string
        - in: query
          name: paymentProvider
          description: payment provider that can be consume the vouchers
          required: false
          schema:
            type: string
        - in: query
          name: currency
          description: currency how the voucher can be purchased
          required: false
          schema:
            type: string
        - in: query
          name: shop
          description: distributor of the vouchers
          required: false
          schema:
            type: string
        - in: query
          name: enabled
          description: distributor of the vouchers
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: resulting Voucher types list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoucherTypes'
    post:
      tags:
        - Voucher types configuration
      summary: create the voucher type
      operationId: createVoucherType
      description: voucher type created
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoucherTypes'
      responses:
        '201':
          $ref: '#/components/responses/VoucherTypeResponse'

  /voucher-type/{typeId}:
    parameters:
      - $ref: '#/components/parameters/TypeId'
    get:
      tags:
        - Voucher types configuration
      summary: search the voucher type by code
      operationId: getVoucherType
      description: voucher type with code passed
      responses:
        '200':
          $ref: '#/components/responses/VoucherTypeResponse'
    put:
      tags:
        - Voucher types configuration
      summary: update the voucher type by code
      operationId: updateVoucherType
      description: voucher type with code passed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoucherTypes'
      responses:
        '200':
          $ref: '#/components/responses/VoucherTypeResponse'

  /voucher:
    get:
      tags:
        - Voucher Management API
      summary: search the vouchers
      operationId: getVouchers
      description: list of vouchers with optional filters
      parameters:
        - in: query
          name: typeId
          description: the type id of the category
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: status of the vouchers
          required: false
          schema:
            type: string
            enum: [ ACTIVE, PURCHASED, REDEEMED, INACTIVE]
        - in: query
          name: userId
          description: user id that have consumed the vouchers
          required: false
          schema:
            type: string
        - in: query
          name: merchantId
          description: merchant id
          required: false
          schema:
            type: string
        - in: query
          name: transactionId
          description: transaction id that have consumed the vouchers
          required: false
          schema:
            type: string
      responses:
        '200':
          description: resulting Voucher list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vouchers'

  /voucher/upload:
    post:
      tags:
        - Voucher Management API
      summary: upload
      operationId: uploadVoucher
      description: upload the voucher
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                typeId:
                  type: string
                  example: VOU1M
              required:
                - file
                - typeId
      responses:
        '200':
          $ref: '#/components/responses/UploadResponse'

  /voucher/redeem:
    post:
      tags:
        - Voucher Management API
      summary: redeem
      operationId: redeemVoucher
      description: redeem the voucher
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                typeId:
                  type: string
                  example: VOU1M
              required:
                - file
                - typeId
      responses:
        '200':      # Response
          $ref: '#/components/responses/UploadResponse'

components:
  parameters:
    TypeId:
      in: path
      name: typeId
      description: the voucher type configured
      required: true
      schema:
        type: string
    VoucherCode:
      in: path
      name: code
      description: the vouchers code
      required: true
      schema:
        type: string

  requestBodies:
    VoucherRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VoucherRequest'

  responses:
    ErrorDetails:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'
    VoucherResponse:
      description: Voucher retrieved correctly
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vouchers'
    VoucherTypeResponse:
      description: resulting Voucher type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VoucherTypes'
    UploadResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VoucherUpload'
  schemas:
    AvailableVoucherTypes:
      type: object
      properties:
        typeId:
          type: string
          example: VOU1MONTH
        description:
          type: string
          example: 1 Month Voucher
        amount:
          type: number
          example: 19.99
        currency:
          type: string
          example: USD
        voucherAvailable:
          type: integer
          example: 42

    ErrorDetails:
      type: object
      properties:
        errorCode:
          type: string
          example: TYPE_NOT_FOUND
        errorMessage:
          type: string
          example: Voucher Type tin1m not found

    VoucherTypes:
      type: object
      required:
        - description
        - product
        - amount
        - currency
        - merchant
        - country
        - paymentProvider
        - shop
        - priority
      properties:
        typeId:
          type: string
          example: VOU1MONTH
          description: Logical identification of the voucher-type
        description:
          type: string
          example: 1 Month Voucher
          description: Description of the voucher type can be shown
        product:
          type: string
          example: 1 Month Gold
          description: Voucher type family to which it belongs
        amount:
          type: number
          minimum: 0
          example: 19.99
          description: The wholesale price
        currency:
          type: string
          example: EUR
          description: The wholesale currency
        promo:
          type: string
          example: sale
          description: The promo code if present
        merchant:
          type: string
          example: tinder
          description: Merchant identification value
        country:
          type: string
          example: IT
          description: Country where the vouchers are distributed
        paymentProvider:
          type: string
          example: PAYTM
          description: Who are eligible to the voucher distribution
        shop:
          type: string
          example: MNO1234
          description: Technical id for identification of the purchase flow
        enabled:
          type: boolean
          example: IT
        startDate:
          type: string
          format: 'date-time'
          example: 2020-01-01T17:32:28Z
        endDate:
          type: string
          format: 'date-time'
          example: 2020-01-01T17:32:28Z
        priority:
          type: integer
          example: 3
        baseUrl:
          type: string
          example: www.tinder.com/vip/
        expiryTimeReservation:
          type: integer
          example: 900000
          default: 900000
        bypassStatusCheck:
          type: boolean
          example: false
          default: false
    ReserveRequest:
      type: object
      required:
        - transactionId
      properties:
        transactionId:
          type: string
          example: TXN123445

    VoucherRequest:
      required:
        - amount
        - currency
        - transactionStatus
        - transactionDate
      allOf:
        - $ref: '#/components/schemas/ReserveRequest'
        - type: object
          properties:
            userId:
              type: string
              example: MARIO
              description: User to buy the voucher
            transactionStatus:
              type: string
              enum: [ SUCCESS, FAILED]
              description: Status of the transaction
            transactionDate:
              type: string
              format: date-time
              example: 2017-07-21T17:32:28Z
              description: Time of the transaction when are billed the voucher
            amount:
              type: number
              example: 10.00
              minimum: 0
              description: Retail price
            currency:
              type: string
              example: AUD
              minLength: 1
              description: Retail currency

    Vouchers:
      type: object
      properties:
        code:
          type: string
          example: VOU1MONTH
          description: Voucher code
        typeId:
          type: string
          example: TND1MGLD
          description: Logical type of the voucher
        voucherFileId:
          type: string
          example: 1234-5678-9123
          description: Identification id of the upload id stored
        status:
          type: string
          enum: [ ACTIVE, RESERVED, PURCHASED, REDEEMED, INACTIVE]
          description: status of the voucher
        userId:
          type: string
          example: MARIO
          description: User to buy the voucher
        transactionId:
          type: string
          example: TXN123445
          description: Id of the transaction  to bill the voucher
        transactionDate:
          type: string
          format: 'date-time'
          example: 2017-07-21T17:32:28Z
          description: Time of the transaction when are billed the voucher
        amount:
          type: number
          example: 19.99
          minimum: 0
          description: Retail price
        currency:
          type: string
          example: RM
          minLength: 1
          description: Retail currency
        reserveDate:
          type: string
          format: 'date-time'
          example: 2017-07-21T17:32:28Z
          description: Date of the reservation of voucher
        purchaseDate:
          type: string
          format: 'date-time'
          example: 2017-07-21T17:32:28Z
          description: Purchase Date of voucher
        redeemDate:
          type: string
          format: 'date-time'
          example: 2017-07-21T17:32:28Z
          description: Redeem Date of voucher
        activationUrl:
          type: string
          example: www.test.com/vip/1234-5647
          description: Resirection url of the single voucher
    VoucherUpload:
      type: object
      properties:
        status:
          type: string
          enum: [UPLOADED, ERROR]
        operation:
          type: string
          enum: [UPLOAD, REDEEM]
        filename:
          type: string
          example: file.csv
        typeId:
          type: string
          example: TIN1M
        total:
          type: integer
          example: 42
        uploaded:
          type: integer
          example: 42
        errors:
          type: integer
          example: 42

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
      description: Authorization key
    SignRequest:
      type: apiKey
      in: header
      name: X-Signature
      description: Request signature hash
